var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"Documentation for SeqShuffle.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SeqShuffle","category":"page"},{"location":"#SeqShuffle","page":"Home","title":"SeqShuffle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SeqShuffle.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SeqShuffle]","category":"page"},{"location":"#SeqShuffle.data_2_dummy-Tuple{Vector{String}}","page":"Home","title":"SeqShuffle.data_2_dummy","text":"data_2_dummy(dna_strings::Vector{String}; F=FloatType)\n\nTurn a fasta file of DNA sequences to dummy encoded array; assumes each sequence in the fasta is the same length.\n\nInput:\n\ndna_strings: A vector of strings \n\nOutput:     A matrix of type FloatType (e.g., Float32) where each column corresponds to the dummy encoded string in the fasta file.\n\n\n\n\n\n","category":"method"},{"location":"#SeqShuffle.est_1st_order_markov_bg-Tuple{Vector{String}}","page":"Home","title":"SeqShuffle.est_1st_order_markov_bg","text":"est_1st_order_markov_bg(vec_str::Vector{Sting}; laplace=1; F=FloatType)\n\nEstimate the Markov matrix, e.g.,\n        A   C   G   T       \n    A  0.1 0.3 0.4 0.2 \n    C  0.5 0.1 0.1 0.3\n    G  0.2 0.2 0.2 0.4\n    T  0.7 0.1 0.1 0.1\nin the (shuffled) background sequence.\nThe rows and the columns are ordered in A, C, G, T.\n\nAnd estimate the initial distribution, e.g,\n    A   C   G   T       \n   0.2 0.2 0.3 0.3 \nThe columns are ordered in A, C, G, T.\n\nInput:\n\nvec_str: vector of strings\nlaplace: pseudocounts to add (optional, default to 1)\nF: datatype of the estiamtes (optional, default to Float32)\n\nOutput:     The estimated 4x4 markov matrix and 4x1 initial distribution.\n\n\n\n\n\n","category":"method"},{"location":"#SeqShuffle.read_fasta-Tuple{String}","page":"Home","title":"SeqShuffle.read_fasta","text":"read_fasta(filepath;  max_entries=1000000)\n\nRead a fasta file into a vector of strings\n\nInput:\n\nfilepath: A string that's the input fasta file's absolute filepath.\nmax_entries: The max number of entries to take from the fasta file (from 1 to max_entries).\n\nOutput:     A vector of strings that corresponds to the strings in the fasta file. All strings are in uppercase.\n\n\n\n\n\n","category":"method"},{"location":"#SeqShuffle.seq_shuffle-Tuple{String}","page":"Home","title":"SeqShuffle.seq_shuffle","text":"seq_shuffle(seq::String; k=2, seed=nothing)\n\nShuffle the input string such that it preserves the frequency of k-mers\n\nInput:\n\nseq: A string\nk: interger; k-mer frequency\nseed: (integer) seed for random number generation\n\nOutput:     A shuffled version of the input string seq\n\n\n\n\n\n","category":"method"},{"location":"#SeqShuffle.shuffle_fasta-Tuple{String, String}","page":"Home","title":"SeqShuffle.shuffle_fasta","text":"shuffle_fasta(input_fasta_location::String, \n          fasta_output_location::String;\n          k::Int=2, seed=nothing,\n          max_entries=1000000)\n\nShuffle each sequence in the input fasta file such that it preserves the  frequency of the k-mers in each sequence.\n\nInput:\n\ninput_fasta_location: the absolute file path of the fasta file.\nfasta_output_location: the absolute file path of the output fasta file.\nk: k for k-mer frequency.\nseed: The seed for random number generator.\nmax_entries: The max number of entries to take from the fasta file (from 1 to max_entries).\n\nOutput:     A fasta file that contains the shuffled version of the input fasta file. \n\n\n\n\n\n","category":"method"}]
}
